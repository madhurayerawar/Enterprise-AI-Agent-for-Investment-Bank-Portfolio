AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an AWS Bedrock Agent resource and Lambda function.

Resources:
  # IAM Managed Policy for CloudWatch Logs
  CloudWatchLogsPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"

  # IAM Role for Lambda Function Execution
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - !Ref CloudWatchLogsPolicy
      Policies:
        - PolicyName: 'LambdaCustomPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: !GetAtt ActionCallDLQ.Arn

  # IAM Managed Policy for Lambda Invocation
  LambdaInvokePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ActionCall-${AWS::AccountId}'

  # IAM Role for Bedrock Agent
  BedrockAgentExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - !Ref LambdaInvokePolicy

  # SQS Queue for Dead Letter Queue (DLQ)
  ActionCallDLQ:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub "ActionCallDLQ-${AWS::AccountId}-${AWS::Region}"

  # Lambda Function for Action Call
  ActionCall:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub 'ActionCall-${AWS::AccountId}'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      MemorySize: 1024
      Timeout: 120
      DeadLetterConfig:
        TargetArn: !GetAtt ActionCallDLQ.Arn
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              print(event)
            
              # Mock data for demonstration purposes
              company_data = [
                  #Technology Industry
                  {"companyId": 1, "companyName": "TechStashNova Inc.", "industrySector": "Technology", "revenue": 10000, "expenses": 3000, "profit": 7000, "employees": 10},
                  {"companyId": 2, "companyName": "QuantumPirateLeap Technologies", "industrySector": "Technology", "revenue": 20000, "expenses": 4000, "profit": 16000, "employees": 10},
                  {"companyId": 3, "companyName": "CyberCipherSecure IT", "industrySector": "Technology", "revenue": 30000, "expenses": 5000, "profit": 25000, "employees": 10},
                  {"companyId": 4, "companyName": "DigitalMyricalDreams Gaming", "industrySector": "Technology", "revenue": 40000, "expenses": 6000, "profit": 34000, "employees": 10},
                  {"companyId": 5, "companyName": "NanoMedNoLand Pharmaceuticals", "industrySector": "Technology", "revenue": 50000, "expenses": 7000, "profit": 43000, "employees": 10},
                  {"companyId": 6, "companyName": "RoboSuperBombTech Industries", "industrySector": "Technology", "revenue": 60000, "expenses": 8000, "profit": 52000, "employees": 12},
                  {"companyId": 7, "companyName": "FuturePastNet Solutions", "industrySector": "Technology",  "revenue": 60000, "expenses": 9000, "profit": 51000, "employees": 10},
                  {"companyId": 8, "companyName": "InnovativeCreativeAI Corp", "industrySector": "Technology", "revenue": 65000, "expenses": 10000, "profit": 55000, "employees": 15},
                  {"companyId": 9, "companyName": "EcoLeekoTech Energy", "industrySector": "Technology", "revenue": 70000, "expenses": 11000, "profit": 59000, "employees": 10},
                  {"companyId": 10, "companyName": "TechyWealthHealth Systems", "industrySector": "Technology", "revenue": 80000, "expenses": 12000, "profit": 68000, "employees": 10},
              
                  #Real Estate Industry
                  {"companyId": 11, "companyName": "LuxuryToNiceLiving Real Estate", "industrySector": "Real Estate", "revenue": 90000, "expenses": 13000, "profit": 77000, "employees": 10},
                  {"companyId": 12, "companyName": "UrbanTurbanDevelopers Inc.", "industrySector": "Real Estate", "revenue": 100000, "expenses": 14000, "profit": 86000, "employees": 10},
                  {"companyId": 13, "companyName": "SkyLowHigh Towers", "industrySector": "Real Estate", "revenue": 110000, "expenses": 15000, "profit": 95000, "employees": 18},
                  {"companyId": 14, "companyName": "GreenBrownSpace Properties", "industrySector": "Real Estate", "revenue": 120000, "expenses": 16000, "profit": 104000, "employees": 10},
                  {"companyId": 15, "companyName": "ModernFutureHomes Ltd.", "industrySector": "Real Estate", "revenue": 130000, "expenses": 17000, "profit": 113000, "employees": 10},
                  {"companyId": 16, "companyName": "CityCountycape Estates", "industrySector": "Real Estate", "revenue": 140000, "expenses": 18000, "profit": 122000, "employees": 10},
                  {"companyId": 17, "companyName": "CoastalFocalRealty Group", "industrySector": "Real Estate", "revenue": 150000, "expenses": 19000, "profit": 131000, "employees": 10},
                  {"companyId": 18, "companyName": "InnovativeModernLiving Spaces", "industrySector": "Real Estate", "revenue": 160000, "expenses": 20000, "profit": 140000, "employees": 10},
                  {"companyId": 19, "companyName": "GlobalRegional Properties Alliance", "industrySector": "Real Estate", "revenue": 170000, "expenses": 21000, "profit": 149000, "employees": 11},
                  {"companyId": 20, "companyName": "NextGenPast Residences", "industrySector": "Real Estate", "revenue": 180000, "expenses": 22000, "profit": 158000, "employees": 260}
              ]
              
            
              def get_named_parameter(event, name):
                  return next(item for item in event['parameters'] if item['name'] == name)['value']
              
          
              def companyResearch(event):
                  companyName = get_named_parameter(event, 'name').lower()
                  print("NAME PRINTED: ", companyName)
                  
                  for company_info in company_data:
                      if company_info["companyName"].lower() == companyName:
                          return company_info
                  return None
              
              def createPortfolio(event, company_data):
                  numCompanies = int(get_named_parameter(event, 'numCompanies'))
                  industry = get_named_parameter(event, 'industry').lower()

                  industry_filtered_companies = [company for company in company_data
                                                if company['industrySector'].lower() == industry]

                  sorted_companies = sorted(industry_filtered_companies, key=lambda x: x['profit'], reverse=True)

                  top_companies = sorted_companies[:numCompanies]
                  return top_companies

          
              def sendEmail(event, company_data):
                  emailAddress = get_named_parameter(event, 'emailAddress')
                  fomcSummary = get_named_parameter(event, 'fomcSummary')
              
                  # Retrieve the portfolio data as a string
                  portfolioDataString = get_named_parameter(event, 'portfolio')
              

                  # Prepare the email content
                  email_subject = "Portfolio Creation Summary and FOMC Search Results"
                  #email_body = f"FOMC Search Summary:\n{fomcSummary}\n\nPortfolio Details:\n{json.dumps(portfolioData, indent=4)}"
              
                  # Email sending code here (commented out for now)
              
                  return "Email sent successfully to {}".format(emailAddress)   
                
                
              result = ''
              response_code = 200
              action_group = event['actionGroup']
              api_path = event['apiPath']
              
              print("api_path: ", api_path )
              
              if api_path == '/companyResearch':
                  result = companyResearch(event)
              elif api_path == '/createPortfolio':
                  result = createPortfolio(event, company_data)
              elif api_path == '/sendEmail':
                  result = sendEmail(event, company_data)
              else:
                  response_code = 404
                  result = f"Unrecognized api path: {action_group}::{api_path}"
                  
              response_body = {
                  'application/json': {
                      'body': result
                  }
              }
                  
              action_response = {
                  'actionGroup': event['actionGroup'],
                  'apiPath': event['apiPath'],
                  'httpMethod': event['httpMethod'],
                  'httpStatusCode': response_code,
                  'responseBody': response_body
              }

              api_response = {'messageVersion': '1.0', 'response': action_response}
              return api_response

  # Lambda Permission for Bedrock to Invoke Lambda
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: ActionCall
    Properties:
      FunctionName: !GetAtt ActionCall.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'bedrock.amazonaws.com'
      SourceArn: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'

  # Bedrock Agent Resource
  BedrockAgent:
    Type: "AWS::Bedrock::Agent"
    DependsOn: LambdaInvokePermission
    Properties:
      AgentName: !Sub 'PortfolioCreator-${AWS::AccountId}'
      AgentResourceRoleArn: !GetAtt BedrockAgentExecutionRole.Arn
      AutoPrepare: 'True'
      FoundationModel: 'anthropic.claude-3-haiku-20240307-v1:0'
      Instruction: |
        You are an investment analyst. Your job is to assist in investment analysis, create research summaries, generate profitable company portfolios, and facilitate communication through emails. Here is how I want you to think step by step:
        
        1. Portfolio Creation:
            Analyze the user's request to extract key information such as the desired number of companies and industry. 
            Based on the criteria from the request, create a portfolio of companies. Use the template provided to format the portfolio.
        
        2. Company Research and Document Summarization:
            For each company in the portfolio, conduct detailed research to gather relevant financial and operational data.
            When a document, like the FOMC report, is mentioned, retrieve the document and provide a concise summary.
        
        3. Email Communication:
            Using the email template provided, format an email that includes the newly created company portfolio and any summaries of important documents.
            Utilize the provided tools to send an email upon request, That includes a summary of provided responses and portfolios created.
          
        4. Do not hallucinate. If the information is not found, respond with "I dont have that information." 
        
        Here is an example of a company portfolio.  
        
        <portfolio_example>
        
              Here is a portfolio of the top 3 real estate companies:
        
                1. NextGenPast Residences with revenue of $170,000, expenses of $20,000 and profit of $100,000 employing 260 people. 
                
                2. GlobalRegional Properties Alliance with revenue of $170,000, expenses of $21,000 and profit of $149,000 employing 11 people.
                
                3. InnovativeModernLiving Spaces with revenue of $160,000, expenses of $20,000 and profit of $140,000 employing 10 people.
        
        </portfolio_example>
        
        Here is an example of an email formatted. 
        
        <email_format>
        
              Company Portfolio:
        
                1. NextGenPast Residences with revenue of $180,000, expenses of $22,000 and profit of $158,000 employing 260 people. 
                
                2. GlobalRegional Properties Alliance with revenue of $170,000, expenses of $21,000 and profit of $149,000 employing 11 people.
                
                3. InnovativeModernLiving Spaces with revenue of $160,000, expenses of $20,000 and profit of $140,000 employing 10 people.  
        
              FOMC Report:
        
                Participants noted that recent indicators pointed to modest growth in spending and production. Nonetheless, job gains had been robust in recent months, and the unemployment rate remained low. Inflation had eased somewhat but remained elevated.
                
                Participants recognized that Russia’s war against Ukraine was causing tremendous human and economic hardship and was contributing to elevated global uncertainty. Against this background, participants continued to be highly attentive to inflation risks.
        </email_format>
        
      Description: "Generative AI Investment Analyst Tool for creating portfolios and summarizing documents."
      IdleSessionTTLInSeconds: 900
      ActionGroups:
        - ActionGroupName: "PortfolioCreator-actions"
          Description: "This action group is used to query information about customers and procedures."
          ActionGroupExecutor:
            Lambda: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ActionCall-${AWS::AccountId}'
          ApiSchema:
            Payload: |
              {
                "openapi": "3.0.1",
                "info": {
                  "title": "PortfolioCreatorAssistant API",
                  "description": "API for creating a company portfolio, search company data, and send summarized emails",
                  "version": "1.0.0"
                },
                "paths": {
                  "/companyResearch": {
                    "post": {
                      "description": "Get financial data for a company by name",
                      "operationId": "companyResearch",
                      "parameters": [
                        {
                          "name": "name",
                          "in": "query",
                          "description": "Name of the company to research",
                          "required": true,
                          "schema": {
                            "type": "string"
                          }
                        }
                      ],
                      "responses": {
                        "200": {
                          "description": "Successful response with company data",
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/CompanyData"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "/createPortfolio": {
                    "post": {
                      "description": "Create a company portfolio of top profit earners by specifying number of companies and industry",
                      "operationId": "createPortfolio",
                      "parameters": [
                        {
                          "name": "numCompanies",
                          "in": "query",
                          "description": "Number of companies to include in the portfolio",
                          "required": true,
                          "schema": {
                            "type": "integer",
                            "format": "int32"
                          }
                        },
                        {
                          "name": "industry",
                          "in": "query",
                          "description": "Industry sector for the portfolio companies",
                          "required": true,
                          "schema": {
                            "type": "string"
                          }
                        }
                      ],
                      "responses": {
                        "200": {
                          "description": "Successful response with generated portfolio",
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/Portfolio"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "/sendEmail": {
                    "post": {
                      "description": "Send an email with FOMC search summary and created portfolio",
                      "operationId": "sendEmail",
                      "parameters": [
                        {
                          "name": "emailAddress",
                          "in": "query",
                          "description": "Recipient's email address",
                          "required": true,
                          "schema": {
                            "type": "string",
                            "format": "email"
                          }
                        },
                        {
                          "name": "fomcSummary",
                          "in": "query",
                          "description": "Summary of FOMC search results",
                          "required": true,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "portfolio",
                          "in": "query",
                          "description": "Details of the created stock portfolio",
                          "required": true,
                          "schema": {
                            "$ref": "#/components/schemas/Portfolio"
                          }
                        }
                      ],
                      "responses": {
                        "200": {
                          "description": "Email sent successfully",
                          "content": {
                            "text/plain": {
                              "schema": {
                                "type": "string",
                                "description": "Confirmation message"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "components": {
                  "schemas": {
                    "CompanyData": {
                      "type": "object",
                      "description": "Financial data for a single company",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Company name"
                        },
                        "expenses": {
                          "type": "string",
                          "description": "Annual expenses"
                        },
                        "revenue": {
                          "type": "number",
                          "description": "Annual revenue"
                        },
                        "profit": {
                          "type": "number",
                          "description": "Annual profit"
                        }
                      }
                    },
                    "Portfolio": {
                      "type": "object",
                      "description": "Stock portfolio with specified number of companies",
                      "properties": {
                        "companies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CompanyData"
                          },
                          "description": "List of companies in the portfolio"
                        }
                      }
                    }
                  }
                }
              }
            
  # Bedrock Agent Alias Resource
  BedrockAgentAlias:
    Type: 'AWS::Bedrock::AgentAlias'
    DependsOn: BedrockAgent
    Properties:
      AgentAliasName: !Sub 'Alias-1'
      AgentId: !GetAtt BedrockAgent.AgentId

Outputs:
  BedrockAgentName:
    Description: 'Name of the Bedrock Agent created'
    Value: !Ref BedrockAgent
  BedrockAgentAliasName:
    Description: 'Name of the Bedrock Agent Alias created'
    Value: !Ref BedrockAgentAlias
  ActionCallArn:
    Description: 'ARN of the invoke Lambda function'
    Value: !GetAtt ActionCall.Arn

